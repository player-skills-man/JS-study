JavaScript 是互联网上最流行的脚本语言，
这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。

《JavaScript 用法》
HTML 中的脚本必须位于 <script> 与 </script> 标签之间。
脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。
如需在 HTML 页面中插入 JavaScript，请使用 <script> 标签。
<script> 和 </script> 会告诉 JavaScript 在何处开始和结束。
<script> 和 </script> 之间的代码行包含了 JavaScript:

那些老旧的实例可能会在 <script> 标签中使用 type="text/javascript"。
现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。

脚本可位于 HTML 的 <body> 或 <head> 部分中，或者同时存在于两个部分中。
通常的做法是把函数放入 <head> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。

也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。
外部 JavaScript 文件的文件扩展名是 .js。
如需使用外部文件，请在 <script> 标签的 "src" 属性中设置该 .js 文件：<script src="myScript.js"></script>

JavaScript 对大小写是敏感的。!!!

JavaScript 使用 Unicode 字符集。
Unicode 覆盖了所有的字符，包含标点等字符。

JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)。

对代码行进行折行
您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：
document.write("你好 \
世界!");

不过，您不能像这样折行：
document.write \
("你好世界!");

JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。
而对于传统编程来说，会在执行前对所有代码进行编译。


JavaScript 变量的生存期
JavaScript 变量的生命期从它们被声明的时间开始。
局部变量会在函数运行以后被删除。
全局变量会在页面关闭后被删除。


HTML 事件
HTML 事件可以是浏览器行为，也可以是用户行为。
通常，当事件发生时，你可以做些事情。
在事件触发时 JavaScript 可以执行一些代码。
HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。
以下是 HTML 事件的实例：
    HTML 页面完成加载
    HTML input 字段改变时
    HTML 按钮被点击

下面是一些常见的HTML事件的列表:
事   件	        描   述
onchange	    HTML 元素改变
onclick	        用户点击 HTML 元素
onmouseover	    用户在一个HTML元素上移动鼠标
onmouseout	    用户从一个HTML元素上移开鼠标
onkeydown	    用户按下键盘按键
onload	        浏览器已完成页面的加载


var x = "John";
var y = new String("John");
(x === y) // 结果为 false，因为 x 是字符串，y 是对象

字符串属性:
属   性	        描   述
constructor	    返回创建字符串属性的函数
length	        返回字符串的长度
prototype	    允许您向对象添加属性和方法
原始值字符串，如 "John", 没有属性和方法(因为他们不是对象)。
原始值可以使用 JavaScript 的属性和方法，因为 JavaScript 在执行方法和属性时可以把原始值当作对象。

charAt()	返回指定索引位置的字符
charCodeAt()	返回指定索引位置字符的 Unicode 值
concat()	连接两个或多个字符串，返回连接后的字符串
fromCharCode()	将 Unicode 转换为字符串
indexOf()	返回字符串中检索指定字符第一次出现的位置
lastIndexOf()	返回字符串中检索指定字符最后一次出现的位置
localeCompare()	用本地特定的顺序来比较两个字符串
match()	找到一个或多个正则表达式的匹配
replace()	替换与正则表达式匹配的子串
search()	检索与正则表达式相匹配的值
slice()	提取字符串的片断，并在新的字符串中返回被提取的部分
split()	把字符串分割为子字符串数组
substr()	从起始索引号提取字符串中指定数目的字符
substring()	提取字符串中两个指定的索引号之间的字符
toLocaleLowerCase()	根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLocaleUpperCase()	根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLowerCase()	把字符串转换为小写
toString()	返回字符串对象值
toUpperCase()	把字符串转换为大写
trim()	移除字符串首尾空白
valueOf()	返回某个字符串对象的原始值



变量提升：函数声明和变量声明总是会被解释器悄悄地被"提升"到方法体的最顶部。!!!
JavaScript 只有声明的变量会提升，初始化的不会。


JavaScript this 关键字
面向对象语言中 this 表示当前对象的一个引用。
但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。
    在方法中，this 表示该方法所属的对象。
    如果单独使用，this 表示全局对象。
    在函数中，this 表示全局对象。
    在函数中，在严格模式下，this 是未定义的(undefined)。
    在事件中，this 表示接收事件的元素。
    类似 call() 和 apply() 方法可以将 this 引用到任何对象。



JSON 英文全称 JavaScript Object Notation
JSON 格式化后为 JavaScript 对象
JSON 格式在语法上与创建 JavaScript 对象代码是相同的。
由于它们很相似，所以 JavaScript 程序可以很容易的将 JSON 数据转换为 JavaScript 对象。